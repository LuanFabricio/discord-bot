datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

model Guild {
  id         BigInt    @id
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  channels   Channel[]
  users      User[]
  chatbot    Chatbot[]
}

model Channel {
  id         BigInt    @id
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  synced_at  DateTime?
  guild_id   BigInt
  guild      Guild     @relation(fields: [guild_id], references: [id])
  messages   Message[]
}

model User {
  id         BigInt    @id
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  guild_id   BigInt
  guild      Guild     @relation(fields: [guild_id], references: [id])
  messages   Message[]
  chatbot    Chatbot[]
}

model Message {
  id         BigInt    @id
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  edited_at  DateTime?
  deleted_at DateTime?
  channel_id BigInt
  user_id    BigInt
  channel    Channel   @relation(fields: [channel_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])
}

model Chatbot {
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  name       String?
  nick       String
  prompt     String
  avatar_url String?
  guild_id   BigInt
  user_id    BigInt?
  guild      Guild     @relation(fields: [guild_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])

  @@id([guild_id, nick])
}
